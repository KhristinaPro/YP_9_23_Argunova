/*

Использование методов
    Метод - это набор операторов которые выполняются вместе, для создания метода необходимо задать его имя, определить список параметров и тело метода
    Для вызова метода другого класса необходимо, что бы он был объявлен как паблик, вызов осуществляется по имени класса и метода
если метод не войд, то необходимо вернуть значение соответствуещнго типа
оператор ретерн останавливает выполнение метода и передаёт управление вызвавшему данные метод оператору

Каждый метод имеет набор своих локальных переменных, они видны только в нём и при завершении работы метода уничтожаются
для того что бы переменные были видны в нескольких методов класса, необходимо объявить их полями вне метода, но внутри класса
Для не войд методов необходимо возвращать значение, каждой "путь выполнения" метода должен заканчиваться оператаром ретерн
для войд метода оператор ретерн необязателен

Использование параметров:
Параметры позволяют передавать информацию из одного метода в другой, при объявлении метода можно задать список его параметров, если список пустой, то это означает что метод не имеет параметров

С# сущетсвует три варианта передачи параметров:
 - По значению(изменение значение параметра в методе не влияет на значение в вызвавшем методе)
 - По ссылке(необходимо указывать включевое слово реф)
 - Входные параметры

До вызова метода необходимо обязательно инициализировать переменную 
С# позволяет использовать механизм передачи спискка параметров изменяемой длины - парамс

Модификаторы доступа - это ключевые слова, которые задают объявленный уровень доступности члена или типа
7 уровней специальных возможностей модификаторов доступа
 - public доступ не ограничен 
 - protected доступ ограничен содержащим классом
 - internal доступ 
 - protected internal
 - private доступ ограничен содержащим типом
 - private protected
 - file обьявление тип отоброжает только в текущем исходном файле
абстракт что изменяемый элемент имеет отсутствующую или неполную реализацию
асинк позволяет указать что метод является асинхронным
модификатор статик можно добавить в локальную функцию, и используется для объявления статического члена, принадлежащего к собственному типу, а не к конкретному объекту

*/
